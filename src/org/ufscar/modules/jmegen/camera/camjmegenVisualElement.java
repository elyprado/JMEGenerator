/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.ufscar.modules.jmegen.camera;

import java.io.StringReader;
import java.io.StringWriter;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JToolBar;
import javax.swing.text.Document;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import org.netbeans.core.spi.multiview.CloseOperationState;
import org.netbeans.core.spi.multiview.MultiViewElement;
import org.netbeans.core.spi.multiview.MultiViewElementCallback;
import org.openide.awt.UndoRedo;
import org.openide.text.DataEditorSupport;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;
import org.ufscar.modules.jmegen.data.Camera;

@MultiViewElement.Registration(
    displayName = "#LBL_camjmegen_VISUAL",
iconBase = "org/ufscar/modules/jmegen/iconxml.png",
mimeType = "text/camjmegen+xml",
persistenceType = TopComponent.PERSISTENCE_NEVER,
preferredID = "camjmegenVisual",
position = 2000)
@Messages("LBL_camjmegen_VISUAL=Visual")
public final class camjmegenVisualElement extends JPanel implements MultiViewElement {

    private camjmegenDataObject obj;
    private JToolBar toolbar = new JToolBar();
    private transient MultiViewElementCallback callback;
    private final Document document;

    public camjmegenVisualElement(Lookup lkp) {
        obj = lkp.lookup(camjmegenDataObject.class);
        assert obj != null;
        initComponents();
        
        DataEditorSupport cookie = obj.getLookup().lookup(DataEditorSupport.class);
        document = cookie.getOpenedPanes()[0].getDocument();
        readFile();
    }

    @Override
    public String getName() {
        return "camjmegenVisualElement";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        radFreeCam = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        radOverCam = new javax.swing.JRadioButton();
        radBackCam = new javax.swing.JRadioButton();
        radChaseCam = new javax.swing.JRadioButton();
        radFirstPersonCam = new javax.swing.JRadioButton();
        radSteerCam = new javax.swing.JRadioButton();
        txtBackDistance = new javax.swing.JFormattedTextField();
        lblOverDistance = new javax.swing.JLabel();
        txtOverDistance = new javax.swing.JFormattedTextField();
        txtSteerDistance = new javax.swing.JFormattedTextField();
        lblSteerDistance = new javax.swing.JLabel();
        txtChaseMaxDist = new javax.swing.JFormattedTextField();
        lblChaseMaxDist = new javax.swing.JLabel();
        txtChaseDefDist = new javax.swing.JFormattedTextField();
        lblChaseDefDist = new javax.swing.JLabel();
        txtChaseMinDist = new javax.swing.JFormattedTextField();
        lblChaseMinDist = new javax.swing.JLabel();
        txtChaseSensitivity = new javax.swing.JFormattedTextField();
        lblChaseSensitivity = new javax.swing.JLabel();
        txtSteerCurve = new javax.swing.JFormattedTextField();
        lblSteerCurve = new javax.swing.JLabel();
        lblBackDistance2 = new javax.swing.JLabel();

        setLayout(null);

        buttonGroup1.add(radFreeCam);
        radFreeCam.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(radFreeCam, org.openide.util.NbBundle.getMessage(camjmegenVisualElement.class, "camjmegenVisualElement.radFreeCam.text")); // NOI18N
        radFreeCam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radFreeCamActionPerformed(evt);
            }
        });
        add(radFreeCam);
        radFreeCam.setBounds(20, 40, 66, 23);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(camjmegenVisualElement.class, "camjmegenVisualElement.jLabel1.text")); // NOI18N
        add(jLabel1);
        jLabel1.setBounds(25, 13, 66, 14);

        buttonGroup1.add(radOverCam);
        org.openide.awt.Mnemonics.setLocalizedText(radOverCam, org.openide.util.NbBundle.getMessage(camjmegenVisualElement.class, "camjmegenVisualElement.radOverCam.text")); // NOI18N
        radOverCam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radOverCamActionPerformed(evt);
            }
        });
        add(radOverCam);
        radOverCam.setBounds(20, 110, 59, 23);

        buttonGroup1.add(radBackCam);
        org.openide.awt.Mnemonics.setLocalizedText(radBackCam, org.openide.util.NbBundle.getMessage(camjmegenVisualElement.class, "camjmegenVisualElement.radBackCam.text")); // NOI18N
        radBackCam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radBackCamActionPerformed(evt);
            }
        });
        add(radBackCam);
        radBackCam.setBounds(20, 70, 55, 23);

        buttonGroup1.add(radChaseCam);
        org.openide.awt.Mnemonics.setLocalizedText(radChaseCam, org.openide.util.NbBundle.getMessage(camjmegenVisualElement.class, "camjmegenVisualElement.radChaseCam.text")); // NOI18N
        radChaseCam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radChaseCamActionPerformed(evt);
            }
        });
        add(radChaseCam);
        radChaseCam.setBounds(20, 200, 70, 23);

        buttonGroup1.add(radFirstPersonCam);
        org.openide.awt.Mnemonics.setLocalizedText(radFirstPersonCam, org.openide.util.NbBundle.getMessage(camjmegenVisualElement.class, "camjmegenVisualElement.radFirstPersonCam.text")); // NOI18N
        radFirstPersonCam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radFirstPersonCamActionPerformed(evt);
            }
        });
        add(radFirstPersonCam);
        radFirstPersonCam.setBounds(20, 150, 83, 23);

        buttonGroup1.add(radSteerCam);
        org.openide.awt.Mnemonics.setLocalizedText(radSteerCam, org.openide.util.NbBundle.getMessage(camjmegenVisualElement.class, "camjmegenVisualElement.radSteerCam.text")); // NOI18N
        radSteerCam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radSteerCamActionPerformed(evt);
            }
        });
        add(radSteerCam);
        radSteerCam.setBounds(20, 250, 69, 23);

        txtBackDistance.setText(org.openide.util.NbBundle.getMessage(camjmegenVisualElement.class, "camjmegenVisualElement.txtBackDistance.text")); // NOI18N
        txtBackDistance.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBackDistanceFocusLost(evt);
            }
        });
        add(txtBackDistance);
        txtBackDistance.setBounds(110, 90, 28, 20);

        org.openide.awt.Mnemonics.setLocalizedText(lblOverDistance, org.openide.util.NbBundle.getMessage(camjmegenVisualElement.class, "camjmegenVisualElement.lblOverDistance.text")); // NOI18N
        add(lblOverDistance);
        lblOverDistance.setBounds(50, 130, 59, 20);

        txtOverDistance.setText(org.openide.util.NbBundle.getMessage(camjmegenVisualElement.class, "camjmegenVisualElement.txtOverDistance.text")); // NOI18N
        txtOverDistance.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtOverDistanceFocusLost(evt);
            }
        });
        add(txtOverDistance);
        txtOverDistance.setBounds(110, 130, 28, 20);

        txtSteerDistance.setText(org.openide.util.NbBundle.getMessage(camjmegenVisualElement.class, "camjmegenVisualElement.txtSteerDistance.text")); // NOI18N
        txtSteerDistance.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSteerDistanceFocusLost(evt);
            }
        });
        add(txtSteerDistance);
        txtSteerDistance.setBounds(110, 270, 28, 20);

        org.openide.awt.Mnemonics.setLocalizedText(lblSteerDistance, org.openide.util.NbBundle.getMessage(camjmegenVisualElement.class, "camjmegenVisualElement.lblSteerDistance.text")); // NOI18N
        add(lblSteerDistance);
        lblSteerDistance.setBounds(50, 270, 59, 20);

        txtChaseMaxDist.setText(org.openide.util.NbBundle.getMessage(camjmegenVisualElement.class, "camjmegenVisualElement.txtChaseMaxDist.text")); // NOI18N
        txtChaseMaxDist.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtChaseMaxDistFocusLost(evt);
            }
        });
        add(txtChaseMaxDist);
        txtChaseMaxDist.setBounds(120, 220, 28, 20);

        org.openide.awt.Mnemonics.setLocalizedText(lblChaseMaxDist, org.openide.util.NbBundle.getMessage(camjmegenVisualElement.class, "camjmegenVisualElement.lblChaseMaxDist.text")); // NOI18N
        add(lblChaseMaxDist);
        lblChaseMaxDist.setBounds(50, 220, 80, 20);

        txtChaseDefDist.setText(org.openide.util.NbBundle.getMessage(camjmegenVisualElement.class, "camjmegenVisualElement.txtChaseDefDist.text")); // NOI18N
        txtChaseDefDist.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtChaseDefDistFocusLost(evt);
            }
        });
        add(txtChaseDefDist);
        txtChaseDefDist.setBounds(380, 220, 28, 20);

        org.openide.awt.Mnemonics.setLocalizedText(lblChaseDefDist, org.openide.util.NbBundle.getMessage(camjmegenVisualElement.class, "camjmegenVisualElement.lblChaseDefDist.text")); // NOI18N
        add(lblChaseDefDist);
        lblChaseDefDist.setBounds(290, 220, 90, 20);

        txtChaseMinDist.setText(org.openide.util.NbBundle.getMessage(camjmegenVisualElement.class, "camjmegenVisualElement.txtChaseMinDist.text")); // NOI18N
        txtChaseMinDist.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtChaseMinDistFocusLost(evt);
            }
        });
        add(txtChaseMinDist);
        txtChaseMinDist.setBounds(240, 220, 28, 20);

        org.openide.awt.Mnemonics.setLocalizedText(lblChaseMinDist, org.openide.util.NbBundle.getMessage(camjmegenVisualElement.class, "camjmegenVisualElement.lblChaseMinDist.text")); // NOI18N
        add(lblChaseMinDist);
        lblChaseMinDist.setBounds(170, 220, 80, 20);

        txtChaseSensitivity.setText(org.openide.util.NbBundle.getMessage(camjmegenVisualElement.class, "camjmegenVisualElement.txtChaseSensitivity.text")); // NOI18N
        txtChaseSensitivity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtChaseSensitivityFocusLost(evt);
            }
        });
        add(txtChaseSensitivity);
        txtChaseSensitivity.setBounds(520, 220, 28, 20);

        org.openide.awt.Mnemonics.setLocalizedText(lblChaseSensitivity, org.openide.util.NbBundle.getMessage(camjmegenVisualElement.class, "camjmegenVisualElement.lblChaseSensitivity.text")); // NOI18N
        add(lblChaseSensitivity);
        lblChaseSensitivity.setBounds(420, 220, 100, 20);

        txtSteerCurve.setText(org.openide.util.NbBundle.getMessage(camjmegenVisualElement.class, "camjmegenVisualElement.txtSteerCurve.text")); // NOI18N
        txtSteerCurve.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSteerCurveFocusLost(evt);
            }
        });
        add(txtSteerCurve);
        txtSteerCurve.setBounds(230, 270, 28, 20);

        org.openide.awt.Mnemonics.setLocalizedText(lblSteerCurve, org.openide.util.NbBundle.getMessage(camjmegenVisualElement.class, "camjmegenVisualElement.lblSteerCurve.text")); // NOI18N
        add(lblSteerCurve);
        lblSteerCurve.setBounds(150, 270, 90, 20);

        org.openide.awt.Mnemonics.setLocalizedText(lblBackDistance2, org.openide.util.NbBundle.getMessage(camjmegenVisualElement.class, "camjmegenVisualElement.lblBackDistance2.text")); // NOI18N
        add(lblBackDistance2);
        lblBackDistance2.setBounds(50, 90, 60, 20);
    }// </editor-fold>//GEN-END:initComponents

    private void radFreeCamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radFreeCamActionPerformed
        showFields();
        writeFile();
    }//GEN-LAST:event_radFreeCamActionPerformed

    private void radOverCamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radOverCamActionPerformed
        showFields();
        writeFile();
    }//GEN-LAST:event_radOverCamActionPerformed

    private void radBackCamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radBackCamActionPerformed
        showFields();
        writeFile();
    }//GEN-LAST:event_radBackCamActionPerformed

    private void radChaseCamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radChaseCamActionPerformed
        showFields();
        writeFile();
    }//GEN-LAST:event_radChaseCamActionPerformed

    private void radFirstPersonCamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radFirstPersonCamActionPerformed
        showFields();
        writeFile();
    }//GEN-LAST:event_radFirstPersonCamActionPerformed

    private void radSteerCamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radSteerCamActionPerformed
        showFields();
        writeFile();
    }//GEN-LAST:event_radSteerCamActionPerformed

    private void txtBackDistanceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBackDistanceFocusLost
        writeFile();
    }//GEN-LAST:event_txtBackDistanceFocusLost

    private void txtOverDistanceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtOverDistanceFocusLost
        writeFile();
    }//GEN-LAST:event_txtOverDistanceFocusLost

    private void txtChaseMaxDistFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtChaseMaxDistFocusLost
        writeFile();
    }//GEN-LAST:event_txtChaseMaxDistFocusLost

    private void txtChaseMinDistFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtChaseMinDistFocusLost
        writeFile();
    }//GEN-LAST:event_txtChaseMinDistFocusLost

    private void txtChaseDefDistFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtChaseDefDistFocusLost
        writeFile();
    }//GEN-LAST:event_txtChaseDefDistFocusLost

    private void txtChaseSensitivityFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtChaseSensitivityFocusLost
        writeFile();
    }//GEN-LAST:event_txtChaseSensitivityFocusLost

    private void txtSteerDistanceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSteerDistanceFocusLost
        writeFile();
    }//GEN-LAST:event_txtSteerDistanceFocusLost

    private void txtSteerCurveFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSteerCurveFocusLost
        writeFile();
    }//GEN-LAST:event_txtSteerCurveFocusLost

    public void showFields() {
        lblBackDistance2.setVisible(false);
        txtBackDistance.setVisible(false);
        lblOverDistance.setVisible(false);
        txtOverDistance.setVisible(false);
        lblChaseDefDist.setVisible(false);
        lblChaseMaxDist.setVisible(false);
        lblChaseMinDist.setVisible(false);
        lblChaseSensitivity.setVisible(false);
        txtChaseDefDist.setVisible(false);
        txtChaseMaxDist.setVisible(false);
        txtChaseMinDist.setVisible(false);
        txtChaseSensitivity.setVisible(false);
        lblSteerDistance.setVisible(false);
        lblSteerCurve.setVisible(false);
        txtSteerDistance.setVisible(false);
        txtSteerCurve.setVisible(false);

        
         if (radFreeCam.isSelected()) {
             //
        } else if (radBackCam.isSelected()) {
            lblBackDistance2.setVisible(true);
            txtBackDistance.setVisible(true);
        } else if (radOverCam.isSelected()) {
            lblOverDistance.setVisible(true);
            txtOverDistance.setVisible(true);
        } else if (radFirstPersonCam.isSelected()) {
            //
        } else if (radChaseCam.isSelected()) {
            lblChaseDefDist.setVisible(true);
            lblChaseMaxDist.setVisible(true);
            lblChaseMinDist.setVisible(true);
            lblChaseSensitivity.setVisible(true);
            txtChaseDefDist.setVisible(true);
            txtChaseMaxDist.setVisible(true);
            txtChaseMinDist.setVisible(true);
            txtChaseSensitivity.setVisible(true);
            
        } else if (radSteerCam.isSelected()) {
            lblSteerDistance.setVisible(true);
            lblSteerCurve.setVisible(true);
            txtSteerDistance.setVisible(true);
            txtSteerCurve.setVisible(true);
        }
    }
    
     public void writeFile() {
        String typeCam = "";
        if (radFreeCam.isSelected()) {
            typeCam = "freeCam";
        } else if (radBackCam.isSelected()) {
            typeCam = "backCam";
        } else if (radOverCam.isSelected()) {
            typeCam = "overCam";
        } else if (radFirstPersonCam.isSelected()) {
            typeCam = "firstPersonCam";
        } else if (radChaseCam.isSelected()) {
            typeCam = "chaseCam";
        } else if (radSteerCam.isSelected()) {
            typeCam = "steerCam";
        } else {
            typeCam = "none";
        }


        String file = "";
        Camera cam = new Camera();
        cam.setTypecam(typeCam);
        cam.setBackDistance(Float.parseFloat(txtBackDistance.getText()));
        cam.setChaseDefDist(Float.parseFloat(txtChaseDefDist.getText()));
        cam.setChaseMaxDist(Float.parseFloat(txtChaseMaxDist.getText()));
        cam.setChaseMinDist(Float.parseFloat(txtChaseMinDist.getText()));
        cam.setChaseSensitivity(Float.parseFloat(txtChaseSensitivity.getText()));
        cam.setOverDistance(Float.parseFloat(txtOverDistance.getText()));
        cam.setSteerCurve(Float.parseFloat(txtSteerCurve.getText()));
        cam.setSteerDistance(Float.parseFloat(txtSteerDistance.getText()));

        try {

            //JAXBContext context = JAXBContext.newInstance(Class.forName(cam.getClass().getName()));
            JAXBContext context = JAXBContext.newInstance(Camera.class);
            Marshaller marshaller = context.createMarshaller();
            //JAXBElement<Camera> element = new ObjectFactory().createCarro(carro);
            StringWriter stringWriter = new StringWriter();
            marshaller.marshal(cam, stringWriter);
            file = stringWriter.toString();


            document.remove(0, document.getLength());
            document.insertString(0, file, null);
            //  obj.getPrimaryFile().getOutputStream().write(file.getBytes());
            //  obj.getPrimaryFile().getOutputStream().flush();
        } catch (Exception ex) {
            Exceptions.printStackTrace(ex);
        }
    }
    
    
    public void readFile() {
        Camera cam = new Camera();
        //cam.setTypecam(typeCam);


        try {
            JAXBContext context = JAXBContext.newInstance(Camera.class);
            Unmarshaller uMarshaller = context.createUnmarshaller();
 
            String file = document.getText(0, document.getLength());
            StringReader reader = new StringReader(file);
            cam = (Camera) uMarshaller.unmarshal(reader);
        } catch (Exception ex) {
            //Exceptions.printStackTrace(ex);
        }
        
        if (cam==null) {
            return;
        }
        
        try {
            if (cam.getTypecam().equals("freeCam")) { 
                radFreeCam.setSelected(true);
            } else if (cam.getTypecam().equals("backCam")) { 
                radBackCam.setSelected(true);
            } else if (cam.getTypecam().equals("overCam")) { 
                radOverCam.setSelected(true);
            } else if (cam.getTypecam().equals("firstPersonCam")) { 
                radFirstPersonCam.setSelected(true);
            } else if (cam.getTypecam().equals("chaseCam")) { 
                radChaseCam.setSelected(true);
            } else if (cam.getTypecam().equals("steerCam")) { 
                radSteerCam.setSelected(true);
            }
            showFields();
            
            txtBackDistance.setText(String.valueOf(cam.getBackDistance()));
            txtChaseDefDist.setText(String.valueOf(cam.getChaseDefDist()));
            txtChaseMaxDist.setText(String.valueOf(cam.getChaseMaxDist()));
            txtChaseMinDist.setText(String.valueOf(cam.getChaseMinDist()));
            txtChaseSensitivity.setText(String.valueOf(cam.getChaseSensitivity()));
            txtOverDistance.setText(String.valueOf(cam.getOverDistance()));
            txtSteerCurve.setText(String.valueOf(cam.getSteerCurve()));
            txtSteerDistance.setText(String.valueOf(cam.getSteerDistance()));
            
        } catch (Exception e) {
        }
        

    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblBackDistance2;
    private javax.swing.JLabel lblChaseDefDist;
    private javax.swing.JLabel lblChaseMaxDist;
    private javax.swing.JLabel lblChaseMinDist;
    private javax.swing.JLabel lblChaseSensitivity;
    private javax.swing.JLabel lblOverDistance;
    private javax.swing.JLabel lblSteerCurve;
    private javax.swing.JLabel lblSteerDistance;
    private javax.swing.JRadioButton radBackCam;
    private javax.swing.JRadioButton radChaseCam;
    private javax.swing.JRadioButton radFirstPersonCam;
    private javax.swing.JRadioButton radFreeCam;
    private javax.swing.JRadioButton radOverCam;
    private javax.swing.JRadioButton radSteerCam;
    private javax.swing.JFormattedTextField txtBackDistance;
    private javax.swing.JFormattedTextField txtChaseDefDist;
    private javax.swing.JFormattedTextField txtChaseMaxDist;
    private javax.swing.JFormattedTextField txtChaseMinDist;
    private javax.swing.JFormattedTextField txtChaseSensitivity;
    private javax.swing.JFormattedTextField txtOverDistance;
    private javax.swing.JFormattedTextField txtSteerCurve;
    private javax.swing.JFormattedTextField txtSteerDistance;
    // End of variables declaration//GEN-END:variables
    @Override
    public JComponent getVisualRepresentation() {
        return this;
    }

    @Override
    public JComponent getToolbarRepresentation() {
        return toolbar;
    }

    @Override
    public Action[] getActions() {
        return new Action[0];
    }

    @Override
    public Lookup getLookup() {
        return obj.getLookup();
    }

    @Override
    public void componentOpened() {
    }

    @Override
    public void componentClosed() {
    }

    @Override
    public void componentShowing() {
        readFile();
    }

    @Override
    public void componentHidden() {
    }

    @Override
    public void componentActivated() {
    }

    @Override
    public void componentDeactivated() {
    }

    @Override
    public UndoRedo getUndoRedo() {
        return UndoRedo.NONE;
    }

    @Override
    public void setMultiViewCallback(MultiViewElementCallback callback) {
        this.callback = callback;
    }

    @Override
    public CloseOperationState canCloseElement() {
        return CloseOperationState.STATE_OK;
    }
}
